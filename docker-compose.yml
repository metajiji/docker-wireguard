---

version: "3"

x-container: &container
  restart: always
  logging:
    driver: json-file
    options:
      max-size: 50m

services:
  wg-server:
    <<: *container
    build:  # TODO: Build and push images to quay.io/den4k/wg-server
      context: images/wg-server
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      TZ: ${TZ:-UTC}
    volumes:
      - wireguard_config:/etc/wireguard:ro
    expose:
      - ${WIREGUARD_SERVER_PORT:-51820}
    ports:
      - 127.0.0.1:${COREDNS_PROMETHEUS_PORT:-9153}:${COREDNS_PROMETHEUS_PORT:-9153}  # For monitoring coredns via netdata
    labels:
      - traefik.enable=true
      - traefik.udp.routers.wireguard.entrypoints=wireguard
      - traefik.udp.services.wireguard.loadbalancer.server.port=${WIREGUARD_SERVER_PORT:-51820}
    healthcheck:
      test: ping -q4 -c1 -W1 -w3 $$(ip -br -4 addr show dev wg0 | awk '{split($$NF,a,"/");print a[1]}')
    sysctls:
      net.ipv4.conf.all.src_valid_mark: 1
      net.ipv4.ip_forward: 1
      # net.ipv4.tcp_congestion_control: bbr

  wg-ui:
    <<: *container
    image: ${WIREGUARD_UI_IMAGE_NAME:-ngoduykhanh/wireguard-ui}:${WIREGUARD_UI_IMAGE_TAG:-0.3.7}
    cap_add:
      - NET_ADMIN
    env_file:
      - wg-ui.env
    environment:
      TZ: ${TZ:-UTC}
      WGUI_SERVER_LISTEN_PORT: ${WIREGUARD_SERVER_PORT:-51820}
      WGUI_CONFIG_FILE_PATH: ${WIREGUARD_CONFIG_FILE:-/etc/wireguard/wg0.conf}
    labels:
      - traefik.enable=true
      - traefik.http.routers.wireguard_ui.entrypoints=https
      - traefik.http.routers.wireguard_ui.rule=Host(`$WIREGUARD_UI_HOST`)
      # - traefik.http.routers.wireguard_ui.tls.certresolver=letsencrypt
      - traefik.http.routers.wireguard_ui.tls=true
      - traefik.http.services.wireguard_ui.loadbalancer.server.port=5000
      - traefik.http.services.wireguard_ui.loadbalancer.server.scheme=http
    volumes:
      - wireguard-ui_db:/app/db
      - wireguard_config:/etc/wireguard

  coredns:
    <<: *container
    image: ${COREDNS_IMAGE_NAME:-coredns/coredns}:${COREDNS_IMAGE_TAG:-1.9.3}
    network_mode: service:wg-server
    environment:
      TZ: ${TZ:-UTC}
      COREDNS_PROMETHEUS_PORT: ${COREDNS_PROMETHEUS_PORT:-9153}
      COREDNS_PROMETHEUS_HOST: ${COREDNS_PROMETHEUS_HOST:-0.0.0.0}
    volumes:
      - ./volumes/coredns/Corefile:/Corefile:ro

  bgpq4:
    <<: *container
    build:  # TODO: Build and push images to quay.io/den4k/bgpq4
      context: ./images/bgpq4
    network_mode: service:wg-server
    entrypoint: python
    command: >-
      /tools/parser.py
      --update-interval ${BGP_PARSER_UPDATE_INTERVAL:-300}
      --rkn-dir /data/z-i
      --rkn-dump-file /data/z-i/dump.csv
      --rkn-out-cidr-file /data/cidr-rkn.txt
      --bgpq4-as-list-file /config/as-list.txt
      --bgpq4-out-cidr-file /data/cidr-by-as.txt
      --dns-resolvers $BGP_PARSER_DNS_RESOLVER
      --dns-list-file /config/dns-list.txt
      --dns-out-cidr-file /data/cidr-by-dns.txt
      --static-list-file /config/static-list.txt
      --static-out-cidr-file /data/cidr-static.txt
      --log-level debug
      $BGP_PARSER_EXTRA_ARGS
    volumes:
      - ./volumes/bgpq4:/config:ro
      - bird:/data

  bird:
    <<: *container
    build:  # TODO: Build and push images to quay.io/den4k/bird
      context: ./images/bird
    network_mode: service:wg-server
    env_file:
      - bird.env
    volumes:
      - bird:/etc/bird

  traefik:
    <<: *container
    image: ${TRAEFIK_IMAGE_NAME:-traefik}:${TRAEFIK_IMAGE_TAG:-v2.8.1}
    network_mode: host
    command: >-
      --accessLog=true
      --api.dashboard=true
      --api=true
      --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      --certificatesresolvers.letsencrypt.acme.email=$TRAEFIK_ACME_MAIL
      --certificatesresolvers.letsencrypt.acme.storage=/acme/storage.json
      --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      --entryPoints.api.address=:${TRAEFIK_API_PORT:-8080}
      --entryPoints.api.http.redirections.entryPoint.permanent=true
      --entryPoints.api.http.redirections.entryPoint.scheme=https
      --entryPoints.api.http.redirections.entryPoint.to=api
      --entryPoints.http.address=:80
      --entryPoints.https.address=:443
      --entryPoints.ping.address=127.0.0.1:${TRAEFIK_PING_PORT:-8082}
      --entryPoints.wireguard.address=:${WIREGUARD_SERVER_PORT:-51820}/udp
      --global.checkNewVersion=true
      --global.sendAnonymousUsage=false
      --log.format=${TRAEFIK_LOG_FORMAT:-json}
      --log.level=${TRAEFIK_LOG_LEVEL:-info}
      --metrics.prometheus.addEntryPointsLabels=true
      --metrics.prometheus.addServicesLabels=true
      --metrics.prometheus.entryPoint=ping
      --metrics.prometheus.manualRouting=true
      --metrics.prometheus=true
      --pilot.dashboard=false
      --ping.entryPoint=ping
      --ping.manualRouting=false
      --ping.terminatingStatusCode=503
      --ping=true
      --providers.docker.exposedByDefault=false
      --providers.docker.watch=true
      --providers.docker=true
      --serversTransport.insecureSkipVerify=true
    environment:
      TZ: ${TZ:-UTC}
    healthcheck:
      test: >-
        traefik
        healthcheck
        --entryPoints.ping.address=127.0.0.1:${TRAEFIK_PING_PORT:-8082}
        --ping.entryPoint=ping
    volumes:
      - ./volumes/traefik/etc/traefik:/etc/traefik:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_acme:/acme
    labels:  # labels are dynamic configs as well
      ## Enable traefik for this container
      - traefik.enable=true
      # required when "network_mode: host", "expose:" will be ignored
      - traefik.http.services.traefik-api.loadbalancer.server.port=${TRAEFIK_API_PORT:-8080}
      ## Enable Traefik api and Traefik dashboard
      - traefik.http.routers.traefik-api.tls=true
      # - traefik.http.routers.traefik-api.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik-api.rule=Host(`$TRAEFIK_HOST`) && (PathPrefix(`/api`, `/dashboard`) || Path(`/`))
      - traefik.http.middlewares.traefik-redirect-dashboard.redirectregex.regex=^https:\\\\/\\\\/([^\\\\/]+)\\\\/?$$  # Redirect from "/"
      - traefik.http.middlewares.traefik-redirect-dashboard.redirectregex.replacement=https://$$1/dashboard/  # Redirect to "/dashboard/"
      - traefik.http.routers.traefik-api.entrypoints=api
      - traefik.http.routers.traefik-api.service=api@internal
      - traefik.http.routers.traefik-api.middlewares=traefik-auth@docker,traefik-redirect-dashboard@docker
      - traefik.http.middlewares.traefik-auth.basicauth.realm=Please authenticate
      - traefik.http.middlewares.traefik-auth.basicauth.removeheader=true
      - traefik.http.middlewares.traefik-auth.basicauth.usersfile=/etc/traefik/htpasswd/dashboard
      ## Enable prometheus metrics
      - traefik.http.services.traefik-metrics.loadbalancer.server.port=${TRAEFIK_PING_PORT:-8083}
      # - traefik.http.routers.traefik-metrics.tls=true
      - traefik.http.routers.traefik-metrics.rule=Path(`/metrics`)
      - traefik.http.routers.traefik-metrics.entrypoints=ping
      - traefik.http.routers.traefik-metrics.service=prometheus@internal
      ## Global redirect to https
      - traefik.http.routers.default-http-router.entrypoints=http
      - traefik.http.routers.default-http-router.middlewares=default-https-redirect@docker
      - traefik.http.routers.default-http-router.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.default-http-router.service=noop@internal
      ## Default scheme redirect middleware
      - traefik.http.middlewares.default-https-redirect.redirectScheme.scheme=https
      - traefik.http.middlewares.default-https-redirect.redirectScheme.permanent=true

  netdata:
    <<: *container
    image: ${NETDATA_IMAGE_NAME:-netdata/netdata}:${NETDATA_IMAGE_TAG:-v1.35.1}
    hostname: ${NETDATA_HOSTNAME:-hostname.not.set}  # set to fqdn of netdata host
    network_mode: host
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    env_file:
      - netdata.env
    environment:
      TZ: ${TZ:-UTC}
    labels:
      - traefik.enable=true
      - traefik.http.routers.wireguard_netdata.entrypoints=https
      - traefik.http.routers.wireguard_netdata.rule=Host(`$NETDATA_HOST`)
      # - traefik.http.routers.wireguard_netdata.tls.certresolver=letsencrypt
      - traefik.http.routers.wireguard_netdata.tls=true
      # Middlewares
      - traefik.http.routers.wireguard_netdata.middlewares=traefik-auth@docker
      # Service
      - traefik.http.services.wireguard_netdata.loadbalancer.server.port=19999
      - traefik.http.services.wireguard_netdata.loadbalancer.server.scheme=http
    volumes:
      - ./volumes/netdata/etc/netdata:/etc/netdata
      - /etc/group:/host/etc/group:ro
      - /etc/os-release:/host/etc/os-release:ro  # it can be /etc/lsb-release and dependig on you linux distro
      - /etc/passwd:/host/etc/passwd:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - netdata_cache:/var/cache/netdata

  reloader:
    <<: *container
    image: ${WIREGUARD_RELOADER_IMAGE_NAME:-quay.io/den4k/docker-reloader}:${WIREGUARD_RELOADER_IMAGE_TAG:-1.1.0}
    user: 0:0
    volumes:
      - ./volumes/reloader/config.yml:/config.yml:ro
      - ./volumes/bird/etc/bird:/etc/bird:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - bird:/etc/bird
      - wireguard_config:/etc/wireguard:ro

volumes:
  bird:
  netdata_cache:
  traefik_acme:
  wireguard-ui_db:
  wireguard_config:
